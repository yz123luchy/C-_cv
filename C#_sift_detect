//
// 摘要:
//     The SIFT constructor.
//
// 参数:
//   nFeatures:
//     The number of best features to retain. The features are ranked by their scores
//     (measured in SIFT algorithm as the local contrast)
//
//   nOctaveLayers:
//     The number of layers in each octave. 3 is the value used in D. Lowe paper. The
//     number of octaves is computed automatically from the image resolution.
//
//   contrastThreshold:
//     The contrast threshold used to filter out weak features in semi-uniform (low-contrast)
//     regions. The larger the threshold, the less features are produced by the detector.
//
//   edgeThreshold:
//     The threshold used to filter out edge-like features. Note that the its meaning
//     is different from the contrastThreshold, i.e. the larger the edgeThreshold, the
//     less features are filtered out (more features are retained).
//
//   sigma:
//     The sigma of the Gaussian applied to the input image at the octave #0. If your
//     image is captured with a weak camera with soft lenses, you might want to reduce
//     the number.
public static SIFT Create(int nFeatures = 0, int nOctaveLayers = 3, double contrastThreshold = 0.04, double edgeThreshold = 10, double si







using OpenCvSharp;
using OpenCvSharp.Features2D;
using OpenCvSharp.XFeatures2D;
using System;

namespace OpenCV {

    class Program {
        static void Main(string[] args) {
            Cv2.ImShow("OpenCV", Sift());
            Cv2.WaitKey(1);
            Console.ReadLine();
        }

        /// <summary>
        /// SIFT 特征检测
        /// </summary>
        /// <returns>Mat</returns>
        public static Mat Sift() {
            Mat src = new(@"C:\Users\hyacinth\Desktop\1.jpg", ImreadModes.Color);
            SIFT sift = SIFT.Create(400);
            KeyPoint[] point;
            sift.DetectAndCompute(src, null, out point, new Mat());
            Mat img = new Mat();
            Cv2.DrawKeypoints(src, point, img);
            return img;
        }

        /// <summary>
        /// SURF 特征检测
        /// </summary>
        /// <returns>Mat</returns>
        public static Mat Surf() {
            Mat src = new(@"C:\Users\hyacinth\Desktop\1.jpg", ImreadModes.Color);
            SURF surf = SURF.Create(400, 4, 3, false, false);
            KeyPoint[] point;
            surf.DetectAndCompute(src, null, out point, new Mat());
            Mat img = new Mat();
            Cv2.DrawKeypoints(src, point, img);
            return img;
        }

    }
}


