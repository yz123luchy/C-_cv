using System;
using System.Collections.Generic;
using OpenCvSharp;
using System.IO;

namespace cvsharp_test
{
    class Program
    {
        static void Main(string[] args)
        {
                string testPath = "E:\\shijue_data\\data_luoding\\test";
                //制作训练集
                int test_sample_count = 20;
                //声明变量
                Mat testData;
                List<Mat> testHOGDataVec = new List<Mat>();
                Mat testLabel = new Mat(test_sample_count, 1, MatType.CV_32SC1);

                OpenCvSharp.HOGDescriptor hog = new OpenCvSharp.HOGDescriptor(
                new OpenCvSharp.Size(32, 32),
                new OpenCvSharp.Size(16, 16),
                new OpenCvSharp.Size(8, 8),
                new OpenCvSharp.Size(4, 4),3);
            //组织测试数据
                int testNums = 0;
                for (int i = 1; i < 3; i++)
                {
                    string path = testPath + "\\" + i;
                    DirectoryInfo TheFolder = new DirectoryInfo(path);
                    foreach (FileInfo NextFile in TheFolder.GetFiles())
                    {
                        Console.WriteLine(NextFile.FullName);
                        Mat t2 = Cv2.ImRead(NextFile.FullName, ImreadModes.Grayscale);
                        Mat temp2 = new Mat();
                        Cv2.Resize(t2, temp2, new OpenCvSharp.Size(32, 32), 0.5, 0.5, InterpolationFlags.Linear);
                        float[] descriptors = hog.Compute(temp2, new OpenCvSharp.Size(8, 8), new OpenCvSharp.Size(0, 0));
                        Mat des = OpenCvSharp.InputArray.Create(descriptors).GetMat();
                        Console.WriteLine(des.Size());
                        testHOGDataVec.Add(des.Reshape(0, 1).Clone());
                        testLabel.Set<float>(testNums, i);
                        testNums++;
                        Console.WriteLine(testNums);
                    }
                }
               //创建SVM分类器
                string modelpath = "digits_hog_svm.xml";
                OpenCvSharp.ML.SVM svm = OpenCvSharp.ML.SVM.Load(modelpath);

                testData = new Mat(test_sample_count, hog.GetDescriptorSize(), MatType.CV_32FC1);
                for (int i = 0; i < test_sample_count; ++i)
                {
                    testHOGDataVec[i].CopyTo(testData.Row((int)i));
                }
                Console.WriteLine(testHOGDataVec.Count);
                Console.WriteLine(Cv2.Format(testLabel));
                Console.WriteLine(testData.Size());
                //测试
                Mat result = new Mat();
                Console.WriteLine("开始测试......\n");
                svm.Predict(testData, result);
                //输出结果
                int t = 0, f = 0, n = 1;
                for (int i = 0; i < test_sample_count; i++)
                {
                    int predict = (int)(result.At<float>(i));
                    int actual = (testLabel.At<int>(i));
                    Console.WriteLine("预测结果：" + predict);
                    Console.WriteLine("label结果：" + actual);
                    if (predict == actual)
                    {
                        t++;
                    }
                    else
                    {
                        Console.WriteLine("第" + n + "个识别错误");
                        f++;
                    }
                    n++;
                }
                Console.WriteLine("测试完成......\n");
                //输出结果
                double accuracy = (t * 1.0) / (t + f);
                Console.WriteLine("测试总数：" + test_sample_count);
                Console.WriteLine("正确：" + t);
                Console.WriteLine("错误：" + f);
            }
        }
    }

